// Generated by CoffeeScript 1.8.0
(function() {
  var AbstractStep, App, Categories, MONTHS, Message, Modal, Next, Prev, Query, QueryForm, Results, Stats, Summary, Timeline, format_date_range, solr_query_uri,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = App || {};

  solr_query_uri = function(params) {
    var p;
    p = jQuery.param(_.defaults(params, Config.search_params));
    return "" + Config.solr + p;
  };

  MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

  format_date_range = function(start, end) {
    var e, formatted, s;
    s = new Date(start);
    e = new Date(end);
    formatted = "" + MONTHS[s.getUTCMonth()] + " " + (s.getUTCDate());
    if (e.getUTCFullYear() === s.getUTCFullYear()) {
      if (e.getUTCMonth() === s.getUTCMonth()) {
        if (e.getUTCDate() === s.getUTCDate()) {
          formatted += ", " + (s.getUTCFullYear());
        } else {
          formatted += " - " + (e.getUTCDate()) + ", " + (s.getUTCFullYear());
        }
      } else {
        formatted += " - " + MONTHS[e.getUTCMonth()] + " " + (e.getUTCDate()) + ", " + (e.getFullYear());
      }
    } else {
      formatted += ", " + (s.getUTCFullYear()) + " - " + MONTHS[e.getUTCMonth()] + " " + (e.getUTCDate()) + ", " + (e.getUTCFullYear());
    }
    return formatted;
  };

  Results = (function(_super) {
    __extends(Results, _super);

    function Results() {
      return Results.__super__.constructor.apply(this, arguments);
    }

    Results.prototype.offset = function() {
      return this.get('data').length + this.get('start');
    };

    Results.prototype.is_proper_subset = function() {
      var ex, iso;
      ex = this.get('extent');
      if (ex) {
        iso = ex.map(function(x) {
          return x.toISOString();
        });
        if (iso[0] === this.get('min').toISOString() && iso[1] === this.get('max').toISOString()) {
          return false;
        } else {
          return true;
        }
      } else {
        return false;
      }
    };

    Results.prototype.parse = function(data) {
      if (data.response.numFound) {
        return {
          min: new Date(data.stats.stats_fields.start.min),
          max: new Date(data.stats.stats_fields.start.max),
          start: data.response.start,
          count: data.response.numFound,
          index: _.indexBy(data.response.docs, "id"),
          extent: d3.extent(data.response.docs.map(function(x) {
            return new Date(x.start);
          })),
          data: data.response.docs.map(function(x, i) {
            return {
              id: x.id,
              pos: i,
              v: x["_version_"],
              date: new Date(x.start),
              progress: x.progress,
              category: _.head(x.category),
              title: x.title
            };
          }).reverse()
        };
      } else {
        return {
          min: null,
          max: null,
          start: 0,
          count: 0,
          index: {},
          data: [],
          extent: null
        };
      }
    };

    Results.prototype.urlRoot = function() {
      return solr_query_uri({
        q: App.query.get('q') || "*",
        start: App.query.get('page') * Config.rows,
        rows: Config.rows
      });
    };

    return Results;

  })(Backbone.Model);

  Stats = (function(_super) {
    __extends(Stats, _super);

    function Stats() {
      return Stats.__super__.constructor.apply(this, arguments);
    }

    Stats.prototype.urlRoot = function() {
      return solr_query_uri({
        q: App.query.get('q') || "*",
        rows: 0,
        facet: true,
        "facet.field": "year",
        "facet.mincount": 1
      });
    };

    Stats.prototype.parse = function(data) {
      var years;
      years = data.facet_counts.facet_fields.year.map(function(x) {
        return parseInt(x, 10);
      });
      return {
        data: _.zip.apply(null, _.partition(years, function(_x, i) {
          return i % 2 === 0;
        }))
      };
    };

    return Stats;

  })(Backbone.Model);

  Query = (function(_super) {
    __extends(Query, _super);

    function Query() {
      return Query.__super__.constructor.apply(this, arguments);
    }

    Query.prototype.defaults = {
      q: null,
      filters: {},
      page: 0
    };

    Query.prototype.prev = function() {
      return this.set('page', this.get('page') + 1);
    };

    Query.prototype.next = function() {
      return this.set('page', this.get('page') - 1);
    };

    return Query;

  })(Backbone.Model);

  Categories = (function(_super) {
    __extends(Categories, _super);

    function Categories() {
      return Categories.__super__.constructor.apply(this, arguments);
    }

    Categories.prototype.model = Backbone.Model;

    Categories.prototype.parse = function(data) {
      var c;
      c = data.facet_counts.facet_fields.category.filter(function(_x, i) {
        return i % 2 === 0;
      });
      return c.map(function(x) {
        return {
          catagory: x
        };
      });
    };

    Categories.prototype.url = solr_query_uri({
      q: '*',
      rows: 0,
      facet: true,
      "facet.field": "category",
      "facet.mincount": 1
    });

    return Categories;

  })(Backbone.Collection);

  AbstractStep = (function(_super) {
    __extends(AbstractStep, _super);

    function AbstractStep() {
      this.render = __bind(this.render, this);
      return AbstractStep.__super__.constructor.apply(this, arguments);
    }

    AbstractStep.prototype.initialize = function() {
      return App.results.on('change', this.render);
    };

    AbstractStep.prototype.render = function() {
      return this.$el.html(this.show_step() ? $(this.tpl).html() : this.$el.html("<div></div>"));
    };

    AbstractStep.prototype.events = {
      'click': function() {
        this.step();
        return App.results.fetch();
      }
    };

    return AbstractStep;

  })(Backbone.View);

  Next = (function(_super) {
    __extends(Next, _super);

    function Next() {
      return Next.__super__.constructor.apply(this, arguments);
    }

    Next.prototype.show_step = function() {
      return App.results.get('start') > 0;
    };

    Next.prototype.step = function() {
      if (App.results.get('start') > 0) {
        return App.query.next();
      }
    };

    Next.prototype.tpl = "#next-tpl";

    return Next;

  })(AbstractStep);

  Prev = (function(_super) {
    __extends(Prev, _super);

    function Prev() {
      return Prev.__super__.constructor.apply(this, arguments);
    }

    Prev.prototype.show_step = function() {
      return App.results.offset() < App.results.get('count');
    };

    Prev.prototype.step = function() {
      if (App.results.offset() < App.results.get('count')) {
        return App.query.prev();
      }
    };

    Prev.prototype.tpl = "#prev-tpl";

    return Prev;

  })(AbstractStep);

  Modal = (function(_super) {
    __extends(Modal, _super);

    function Modal() {
      this.render = __bind(this.render, this);
      return Modal.__super__.constructor.apply(this, arguments);
    }

    Modal.prototype.initialize = function() {
      return App.selected.on('change', this.render);
    };

    Modal.prototype.render = function() {
      var data;
      if (App.selected.get('id')) {
        data = App.selected.toJSON();
        data.date_string = format_date_range(data.start, data.end);
        data.locations = _.zip(data.municipality, data.country, data.region).map(function(x) {
          return _.compact(x).join(', ');
        });
        if (data.media_uri && _.head(data.media_uri).match(/\.jpe?g/i)) {
          data.media = [
            {
              url: _.head(data.media_uri).replace(/image:/, ''),
              caption: data.media_caption,
              credit: data.media_credit,
              title: data.media_title
            }
          ];
        }
        data.sources = _.zip(data.source_citation, data.source_title, data.source_url).map(function(x) {
          return {
            citation: x[0] || x[1],
            title: x[1],
            url: x[2]
          };
        });
        this.$el.html(Mustache.render($('#selected-modal-tpl').html(), data));
        return this.$('.modal').modal({
          show: true,
          backdrop: true
        });
      } else {
        return this.$el.html('');
      }
    };

    Modal.prototype.events = {
      'hidden.bs.modal .modal': function() {
        return App.selected.clear();
      }
    };

    return Modal;

  })(Backbone.View);

  Summary = (function(_super) {
    __extends(Summary, _super);

    function Summary() {
      this.render = __bind(this.render, this);
      return Summary.__super__.constructor.apply(this, arguments);
    }

    Summary.prototype.initialize = function() {
      App.results.on('change:extent', this.render);
      App.stats.on('change', this.render);
      return $(window).resize(_.debounce(this.render, 300));
    };

    Summary.prototype.render = function() {
      var axis, context, data, h, max, max_h, min, padding, r, svg, x, y;
      if (App.stats.get('data')) {
        max_h = 15;
        data = App.stats.get('data').map(function(a) {
          return {
            date: new Date(a[0], 1),
            value: a[1]
          };
        });
        this.$el.html('<svg></svg>');
        svg = d3.select(this.$el.find('svg')[0]);
        h = this.$el.height() - 25;
        x = d3.time.scale().domain([
          d3.min(data.map(function(a) {
            return new Date(a.date.getUTCFullYear(), a.date.getUTCMonth() - 1, a.date.getUTCDate());
          })), d3.max(data.map(function(a) {
            return new Date(a.date.getUTCFullYear(), a.date.getUTCMonth() + 1, a.date.getUTCDate());
          }))
        ]).range([20, this.$el.width() - 20]);
        y = d3.scale.linear().domain([
          0, d3.max(data.map(function(a) {
            return a.value;
          }))
        ]).range([h, 0]);
        svg.on("click", function() {
          return console.log(x.invert(d3.mouse(this)[0] + 10).toISOString());
        });
        context = svg.append("g").attr("class", "context");
        r = d3.scale.linear().domain([
          1, d3.max(data.map(function(a) {
            return a.value;
          }))
        ]).range([2, max_h]);
        context.selectAll("rect").data(data.filter(function(a) {
          return a.value > 0;
        })).enter().append("rect").attr("transform", "translate(0, 10)").attr("x", function(d) {
          return -1 + x(d.date);
        }).attr("width", 2).attr("y", function(d) {
          return h / 2 - r(d.value);
        }).attr("height", function(d) {
          return 2 * r(d.value);
        });
        axis = d3.svg.axis().scale(x).orient("bottom");
        context.append("g").attr("class", "x axis").attr("transform", "translate(0, " + h + ")").call(axis);
        if (App.results.is_proper_subset()) {
          padding = 6;
          min = App.results.get('extent')[0];
          max = App.results.get('extent')[1];
          return context.append("g").attr("class", "x brush").append("rect").attr("transform", "translate(0, " + (h / 2 - max_h) + ")").attr("y", 0).attr("height", max_h * 2 + 20).attr("x", x(min) - 5).attr("width", x(max) - x(min) + 10);
        }
      }
    };

    return Summary;

  })(Backbone.View);

  QueryForm = (function(_super) {
    __extends(QueryForm, _super);

    function QueryForm() {
      return QueryForm.__super__.constructor.apply(this, arguments);
    }

    QueryForm.prototype.events = {
      'click .fa-search': function() {
        return this.$('form').submit();
      },
      'submit form': function() {
        var q;
        q = this.$('input').val().trim();
        App.query.set({
          q: q.length ? q : '*',
          filters: {},
          page: 0
        });
        this.$('input').blur();
        App.results.fetch();
        App.stats.fetch();
        return false;
      }
    };

    return QueryForm;

  })(Backbone.View);

  Message = (function(_super) {
    __extends(Message, _super);

    function Message() {
      this.render = __bind(this.render, this);
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.initialize = function() {
      return App.query.on('change', this.render);
    };

    Message.prototype.render = function() {
      return this.$el.html(App.query.get('q'));
    };

    return Message;

  })(Backbone.View);

  Timeline = (function(_super) {
    __extends(Timeline, _super);

    function Timeline() {
      this.render = __bind(this.render, this);
      return Timeline.__super__.constructor.apply(this, arguments);
    }

    Timeline.prototype.initialize = function() {
      App.results.on('change', this.render);
      $(window).resize(_.debounce(this.render, 300));
      return this.tip = d3.tip().attr('class', 'tooltip').offset([-10, 0]).html(function(d) {
        return d.title;
      });
    };

    Timeline.prototype.render = function() {
      var axis, categories, colors, context, data, epsilon, h, padding, r, rand, svg, tip, x, y;
      padding = 25;
      data = App.results.get('data');
      this.$el.html('<svg></svg>');
      if (data.length) {
        h = this.$el.height() - padding;
        epsilon = .75 * h / Config.packing;
        x = d3.time.scale().domain([
          d3.min(data.map(function(a) {
            return new Date(a.date.getUTCFullYear(), a.date.getUTCMonth() - 1, a.date.getUTCDate());
          })), d3.max(data.map(function(a) {
            return new Date(a.date.getUTCFullYear(), a.date.getUTCMonth() + 1, a.date.getUTCDate());
          }))
        ]).range([padding, this.$el.width() - padding]);
        y = d3.scale.linear().domain(d3.extent(data.map(function(a) {
          return a.pos % Config.packing;
        }))).range([h - epsilon / 2 - padding, epsilon / 2 + padding]);
        svg = d3.select(this.$el.find('svg')[0]);
        tip = this.tip;
        context = svg.append("g").attr("class", "context");
        categories = d3.scale.ordinal().domain(App.categories.toJSON().map(function(x) {
          return x.category;
        })).range(_.range(App.categories.length));
        colors = d3.scale.linear().domain([0, App.categories.length]).range(["orange", "green"]);
        svg.call(tip);
        r = d3.scale.linear().domain([
          1, d3.max(data.map(function(a) {
            return a.value;
          }))
        ]).range([2, 15]);
        rand = Math.floor(Math.random() * data.length);
        context.selectAll("circle").data(data).enter().append("circle").attr("class", function(d) {
          return "category" + categories(d.category);
        }).attr("data-category", function(d) {
          return categories(d.category);
        }).attr("data-title", function(d) {
          return d.title;
        }).attr("data-id", function(d) {
          return d.id;
        }).attr("transform", "translate(0, 10)").attr("fill", function(d) {
          if (d.category) {
            return colors(categories(d.category));
          } else {
            return "black";
          }
        }).attr("cx", function(d) {
          return x(d.date);
        }).attr("cy", function(d) {
          return y(d.pos % Config.packing) + d.v % epsilon - epsilon / 2;
        }).attr("r", 6).on('mouseover', function(d) {
          tip.show(d, this).style("border-color", colors(categories(d.category)));
          return context.selectAll("circle.category" + (categories(d.category))).classed("highlight", true);
        }).on('mouseout', function(d) {
          tip.hide(d, this);
          return context.selectAll("circle.highlight").classed("highlight", false);
        }).on('click', tip.hide).filter(function(d) {
          return rand === d.pos;
        }).each(function(d) {
          return tip.show(d, this).style("border-color", colors(categories(d.category)));
        });
        axis = d3.svg.axis().scale(x).orient("bottom");
        return context.append("g").attr("class", "x axis").attr("transform", "translate(0, " + h + ")").call(axis);
      }
    };

    Timeline.prototype.events = {
      "mouseleave circle": function() {
        return this.$("circle.highlight").removeClass('highlight');
      },
      "click circle": function(e) {
        return App.selected.set(App.results.get('index')[$(e.target).data('id')]);
      }
    };

    return Timeline;

  })(Backbone.View);

  App = App || {};

  App.query = new Query({
    q: "*"
  });

  App.results = new Results;

  App.stats = new Stats;

  App.selected = new Backbone.Model;

  App.preview = new Backbone.Model;

  App.categories = new Categories;

  $(function() {
    new QueryForm({
      el: 'header'
    });
    new Timeline({
      el: '#timeline'
    });
    new Summary({
      el: '#summary'
    });
    new Modal({
      el: '#selected'
    });
    new Prev({
      el: '#prev'
    });
    new Next({
      el: '#next'
    });
    return App.categories.fetch({
      success: function() {
        App.results.fetch();
        return App.stats.fetch();
      }
    });
  });

}).call(this);
